version: "3.8"

services:
  realtime-stock-analysis-base:
    build:
      context: .
      dockerfile: Dockerfile.base
    image: realtime-stock-analysis-base

  zookeeper:
    image: bitnami/zookeeper:3.7.0
    container_name: realtime-stock-analysis-zookeeper
    environment:
      - ZOO_ENABLE_AUTH=yes
      - ZOO_DIGEST_USER=super
      - ZOO_DIGEST_PASSWORD_DIGEST=${ZOOKEEPER_DIGEST}
      - ZOO_SERVERS=zookeeper:2888:3888
    ports:
      - "2181:2181"
    networks:
      - realtime-stock-analysis-network
    healthcheck:
      test: ["CMD", "sh", "-c", "echo stat | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: bitnami/kafka:2.8.1
    container_name: realtime-stock-analysis-kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=SASL_PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=SASL_PLAINTEXT://kafka:9092
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_PROTOCOL=SASL
      - KAFKA_ZOOKEEPER_USER=super
      - KAFKA_ZOOKEEPER_PASSWORD=${KAFKA_PASSWORD}
      - KAFKA_OPTS=-Djava.security.auth.login.config=/opt/bitnami/kafka/config/kafka_client_jaas.conf
    volumes:
      - ./config/kafka_client_jaas.conf:/opt/bitnami/kafka/config/kafka_client_jaas.conf
      - ./config/server.properties:/opt/bitnami/kafka/config/server.properties
    depends_on:
      - zookeeper
    networks:
      - realtime-stock-analysis-network
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics.sh",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  streamlit_dashboard:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    container_name: realtime-stock-analysis-streamlit
    environment:
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - TWELVE_DATA_API_KEY=${TWELVE_DATA_API_KEY}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - GROQ_API_KEY=${GROQ_API_KEY}
    depends_on:
      - kafka
      - realtime-stock-analysis-base
    networks:
      - realtime-stock-analysis-network
    ports:
      - "8501:8501" # Expose Streamlit port
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

  data_pipeline:
    build:
      context: .
      dockerfile: Dockerfile.data_pipeline
    container_name: realtime-stock-analysis-data-pipeline
    environment:
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - TWELVE_DATA_API_KEY=${TWELVE_DATA_API_KEY}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - GROQ_API_KEY=${GROQ_API_KEY}
    depends_on:
      - kafka
      - realtime-stock-analysis-base
    networks:
      - realtime-stock-analysis-network

  model_training:
    build:
      context: .
      dockerfile: Dockerfile.model_training
    container_name: realtime-stock-analysis-model-training
    environment:
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - TWELVE_DATA_API_KEY=${TWELVE_DATA_API_KEY}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - GROQ_API_KEY=${GROQ_API_KEY}
    depends_on:
      - kafka
      - realtime-stock-analysis-base
    networks:
      - realtime-stock-analysis-network

  postgres:
    image: postgres:13
    container_name: realtime-stock-analysis-postgres
    environment:
      POSTGRES_DB: stock_analysis_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - realtime-stock-analysis-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d stock_analysis_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: realtime-stock-analysis-mlflow
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MLFLOW_BACKEND_STORE_URI=postgresql://user:password@postgres:5432/stock_analysis_db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow_artifacts
    ports:
      - "5000:5000"
    depends_on:
      - postgres
    networks:
      - realtime-stock-analysis-network
    volumes:
      - mlflow_artifacts:/mlflow_artifacts
    command: bash -c "mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri postgresql://user:password@postgres:5432/stock_analysis_db --default-artifact-root /mlflow_artifacts || tail -f /dev/null"

  airflow:
    image: apache/airflow:2.10.5
    container_name: realtime-stock-analysis-airflow
    environment:
      - AIRFLOW_DB_HOST=postgres
      - AIRFLOW_DB_USER=user
      - AIRFLOW_DB_PASSWORD=password
      - AIRFLOW_DB_NAME=stock_analysis_db
      - AIRFLOW_WEBSERVER_PORT=8080
      - AIRFLOW_EXECUTOR=LocalExecutor
      - AIRFLOW_CONN_MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - mlflow
    networks:
      - realtime-stock-analysis-network
    command: bash -c "airflow db init && airflow webserver"
    user: root

  prometheus:
    image: prom/prometheus:latest
    container_name: realtime-stock-analysis-prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - realtime-stock-analysis-network

  grafana:
    image: grafana/grafana:latest
    container_name: realtime-stock-analysis-grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - realtime-stock-analysis-network

networks:
  realtime-stock-analysis-network:
    driver: bridge

volumes:
  postgres_data:
  mlflow_artifacts:
  grafana_data:
